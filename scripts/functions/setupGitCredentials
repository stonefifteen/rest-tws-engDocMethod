
# Insert the github credentials required from the environment, first
# telling git - meaning that antora as well as the git command line
# utilities will operate under this global constraint - that we are using
# the standard persistent file store for credentials.
#
# Also note that the credential that is passed through the GIT_TOKEN
# environment variable; this is the concatenation of our sdi org bot account
# name, a colon, and the Personal Access Token (PAT) for the bot account,
# NOT the actual password, which Github would rightfully reject anyway.
#
#	For the complex site generation scenario, commits are made to the local
#	that nonetheless require user identification; placeholder valus are used.
#
#	Input(s):
#
#		github-user-token									# This is required for insertion into
#																			#	the ${HOME}/.git-credentials file. The
#																			#	token is formed by the concatenation
#																			#	of <user-name>:<personal-access-token>
#
#	Returns:
#		0																	# The entire process succeeded.
#
#		1																	#	Some step in the process failed.
#
#	Echos:
#		STDERR:	Notification if token is not passed as input
#
#		STDOUT:	NONE
#
#	Testing status:
#		PASSED

setupGitCredentials ()
{
	if [[ $# -lt 1 ]]
	then
		echo "You must specify a GitHub user authentication token" >&2
		return 1
	fi

	# Configure Git to use credentials for accessing any repository
	# without prompting for input. Given that we're anticipating that
	# the repositories that will be used are coming from GitHub, we
	# we set the default branch to "main" to match GitHub, as opposed
	# to the Git CLI default branch "master".

	if git config --global init.defaultBranch main
	then
		if git config --global credential.helper store
		then
			git config --global user.name "Antora site generation"
			if git config --global user.email "asg@null.org"
			then
				# Now that git expects a credential in the store file, insert it from
				# the GIT_TOKEN environment variable.

				cat <<EOF >${HOME}/.git-credentials
https://${GIT_TOKEN}@github.com
EOF

				return 0
			fi
		fi
	fi

	return 1
}
